0 begin class Graph
1 non V
2 t1 = 10
3 V = t1
4 non 
5 t2 = V *int V
6 t4 = 8
7 t3 = t2 *int t4
8 graph = array ( t3 )
9 begin func Graph_addEdge
10 pop param, weight
11 pop param, dest
12 pop param, src
13 t5 = src *int V
14 t6 = t5 + dest
15 t7 = 8
16 t8 = t6 *int t7
17 graph [ t8 ] = weight
18 t9 = dest *int V
19 t10 = t9 + src
20 t11 = 8
21 t12 = t10 *int t11
22 graph [ t12 ] = weight
23 stackpointer - 0
24 end func
25 begin func Graph_printDistances
26 pop param, dist
27 print V
28 t13 = 0
29 i = t13
30 stackpointer + 4
31 t14 = i < V
32 if t14 goto  34
33 goto  43
34 t17 = 8
35 t18 = i *int t17
36 t19 = dist [ t18 ]
37 print t19
38 stackpointer - 0
39 t15 = i
40 t16 = 1
41 i = t15 +int t16
42 goto 31
43 stackpointer - 4
44 stackpointer - 0
45 end func
46 begin func Graph_printGraph
47 t20 = 0
48 i = t20
49 stackpointer + 4
50 t21 = i < V
51 if t21 goto  53
52 goto  65
53 t24 = 0
54 t25 = i *int V
55 t26 = t25 + t24
56 t27 = 8
57 t28 = t26 *int t27
58 t29 = graph [ t28 ]
59 print t29
60 stackpointer - 0
61 t22 = i
62 t23 = 1
63 i = t22 +int t23
64 goto 50
65 stackpointer - 4
66 stackpointer - 0
67 end func
68 begin func Graph_dijkstra
69 pop param, start
70 t31 = 8
71 t30 = V *int t31
72 visited = array ( t30 )
73 stackpointer + 0
74 t33 = 8
75 t32 = V *int t33
76 dist = array ( t32 )
77 stackpointer + 0
78 t34 = 0
79 i = t34
80 stackpointer + 4
81 t35 = i < V
82 if t35 goto  84
83 goto  93
84 t38 = 8
85 t39 = i *int t38
86 t40 = 1000000000
87 dist [ t39 ] = t40
88 stackpointer - 0
89 t36 = i
90 t37 = 1
91 i = t36 +int t37
92 goto 81
93 stackpointer - 4
94 t41 = 8
95 t42 = start *int t41
96 t43 = 0
97 dist [ t42 ] = t43
98 t44 = 0
99 i = t44
100 stackpointer + 4
101 t45 = 1
102 t46 = V -int t45
103 t47 = i < t46
104 if t47 goto  106
105 goto  220
106 t50 = 1000000000
107 minDist = t50
108 stackpointer + 4
109 t51 = 1
110 t52 = - t51
111 minIndex = t52
112 stackpointer + 4
113 t53 = 0
114 j = t53
115 stackpointer + 4
116 t54 = j < V
117 if t54 goto  119
118 goto  142
119 t57 = 8
120 t58 = j *int t57
121 t59 = visited [ t58 ]
122 t60 = 0
123 if t59 == t60 goto  125
124 goto  137
125 t62 = 8
126 t63 = j *int t62
127 t64 = dist [ t63 ]
128 t65 = t64 < minDist
129 if t65 goto  131
130 goto  137
131 t66 = 8
132 t67 = j *int t66
133 t68 = dist [ t67 ]
134 minDist = t68
135 minIndex = j
136 stackpointer - 0
137 stackpointer - 0
138 t55 = j
139 t56 = 1
140 j = t55 +int t56
141 goto 116
142 stackpointer - 4
143 t69 = 1
144 t70 = - t69
145 if minIndex == t70 goto  147
146 goto  149
147 goto  220
148 stackpointer - 0
149 t72 = 8
150 t73 = minIndex *int t72
151 t74 = 1
152 visited [ t73 ] = t74
153 t75 = 0
154 k = t75
155 stackpointer + 4
156 t76 = k < V
157 if t76 goto  159
158 goto  214
159 t79 = minIndex *int V
160 t80 = t79 + k
161 t81 = 8
162 t82 = t80 *int t81
163 t83 = graph [ t82 ]
164 t84 = 0
165 t85 = t83 != t84
166 if t85 goto  168
167 goto  209
168 t86 = 8
169 t87 = k *int t86
170 t88 = visited [ t87 ]
171 t89 = 0
172 if t88 == t89 goto  174
173 goto  209
174 t91 = 8
175 t92 = minIndex *int t91
176 t93 = dist [ t92 ]
177 t94 = 1000000000
178 t95 = t93 != t94
179 if t95 goto  181
180 goto  209
181 t96 = 8
182 t97 = minIndex *int t96
183 t98 = dist [ t97 ]
184 t99 = minIndex *int V
185 t100 = t99 + k
186 t101 = 8
187 t102 = t100 *int t101
188 t103 = graph [ t102 ]
189 t104 = t98 +int t103
190 t105 = 8
191 t106 = k *int t105
192 t107 = dist [ t106 ]
193 t108 = t104 < t107
194 if t108 goto  196
195 goto  209
196 t109 = 8
197 t110 = k *int t109
198 t111 = 8
199 t112 = minIndex *int t111
200 t113 = dist [ t112 ]
201 t114 = minIndex *int V
202 t115 = t114 + k
203 t116 = 8
204 t117 = t115 *int t116
205 t118 = graph [ t117 ]
206 t119 = t113 +int t118
207 dist [ t110 ] = t119
208 stackpointer - 0
209 stackpointer - 0
210 t77 = k
211 t78 = 1
212 k = t77 +int t78
213 goto 156
214 stackpointer - 4
215 stackpointer - 8
216 t48 = i
217 t49 = 1
218 i = t48 +int t49
219 goto 101
220 stackpointer - 4
221 t120 = 0
222 t121 = 8
223 t122 = t120 *int t121
224 t123 = dist [ t122 ]
225 print t123
226 push param dist
227 call, Graph_printDistances
228 stackpointer - 0
229 end func
230 stackpointer - 0
231 end class
232 begin class Dijkstra
233 begin func main
234 pop param, args
235 g = class ( Graph )
236 stackpointer + 4
237 t124 = 0
238 t125 = 1
239 t126 = 9
240 push param t124
241 push param t125
242 push param t126
243 call, g.addEdge
244 t128 = 0
245 t129 = 2
246 t130 = 6
247 push param t128
248 push param t129
249 push param t130
250 call, g.addEdge
251 t132 = 0
252 t133 = 3
253 t134 = 5
254 push param t132
255 push param t133
256 push param t134
257 call, g.addEdge
258 t136 = 0
259 t137 = 4
260 t138 = 3
261 push param t136
262 push param t137
263 push param t138
264 call, g.addEdge
265 t140 = 2
266 t141 = 1
267 t142 = 2
268 push param t140
269 push param t141
270 push param t142
271 call, g.addEdge
272 t144 = 2
273 t145 = 3
274 t146 = 4
275 push param t144
276 push param t145
277 push param t146
278 call, g.addEdge
279 t148 = 0
280 push param t148
281 call, g.dijkstra
282 print g.V
283 stackpointer - 4
284 end func
285 stackpointer - 0
286 end class
